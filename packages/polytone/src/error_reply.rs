use std::fmt::Display;

use cosmwasm_schema::{
    cw_serde,
    serde::{de::DeserializeOwned, Serialize},
};
use cosmwasm_std::{from_binary, to_binary, Binary, StdResult, Uint64};
use thiserror::Error;

use crate::callback::ErrorResponse;

/// A small type you can return as an error, and later parse in the
/// error reply.
///
/// ```compile_fail
/// // uses `compile_fail` to test that a default Display
/// // implementation isn't generated by thiserror for ErrorReplies
/// // that do not implement serialize.
/// use polytone::error_reply::ErrorReply;
/// struct DoesNotImplementSerialize;
/// let _ = ErrorReply(DoesNotImplementSerialize).to_string();
/// ```
#[derive(Error)]
#[cw_serde]
pub struct ErrorReply<T>(pub T);

impl<T: Serialize> Display for ErrorReply<T> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            to_binary(self)
                .map(|b| b.to_base64())
                .map_err(|_| std::fmt::Error)?
                .as_str(),
        )
    }
}

impl<T: DeserializeOwned> ErrorReply<T> {
    pub fn from_error(err: &str) -> StdResult<T> {
        from_binary(&Binary::from_base64(err)?)
    }
}

impl ErrorReply<ErrorResponse> {
    pub fn new(index: u64, error: String) -> Self {
        Self(ErrorResponse {
            message_index: Uint64::new(index),
            error,
        })
    }
}
